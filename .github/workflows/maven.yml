# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      parameter1:
        description: "Enter the first string parameter"
        default: "firstParameter"
        type: "string"
      parameter2:
        description: "Enter the second string parameter"
        default: "secondParameter"
        type: "string"
      mode:
        description: "Choose mode"
        required: true
        type: choice
        options:
          - simple
          - advanced
      run_tests:
        description: 'This is a boolean field.'
        required: true
        default: false
        type: boolean


jobs:

  outputPipelineVariables:

    runs-on: ubuntu-latest
    environment: test1

    steps:
      - name: Output the first parameter supplied by the user
        run: |
          echo The first parameter is ${{ inputs.parameter1 }}
      - name: Output the second parameter supplied by the user
        run: |
          echo The second parameter is ${{ inputs.parameter2 }}
      - name: Output environment value
        run: echo "ENV_NAME=$ENV_NAME"
        env:
          ENV_NAME: ${{ vars.ENV_NAME }}

      - name: Output secret
        run: echo ${{ secrets.PRETENDSECRET}}


  build:
    needs: [outputPipelineVariables]
    runs-on: ubuntu-latest
    environment: test1
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Upload built JAR
      uses: actions/upload-artifact@v4
      with:
        name: newhellow-built-jar
        path: target/newhellow-0.1.0.jar

  runPart1:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: newhellow-built-jar
          path: target

      - name: Output what JAR file was downloaded
        run: |
          ls -al  # Output what JAR file was downloaded.
          ls -al target # Output what JAR file was downloaded in the target folder.

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: List all files and folders
        run: find . -type f

      - name: Run the Java application.
        run: |
          echo "Working directory: $(pwd)"
          ls -al target
          java -jar target/newhellow-0.1.0.jar "1" "abc" "def" "ghi"

      - name: List all files and folders again
        run: find . -type f

      - name: Create Matrix from JSON files
        id: set-matrix
        run: |
          files=$(ls target/jsons/*.json | xargs -n1 basename | jq -R . | jq -s .)
          echo "matrix={\"json\":$files}" >> $GITHUB_OUTPUT

      - name: Upload JSON files
        uses: actions/upload-artifact@v4
        with:
          name: jsons
          path: target/jsons/

  runPart2:
    needs: runPart1
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.generate-jsons.outputs.matrix)}}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: newhellow-built-jar
          path: target

      - name: Output what JAR file was downloaded
        run: |
          ls -al  # Output what JAR file was downloaded.
          ls -al target # Output what JAR file was downloaded in the target folder.

      - name: Download JSONs
        uses: actions/download-artifact@v4
        with:
          name: jsons
          path: target/jsons

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: List all files and folders
        run: find . -type f

      - name: Run the Java application.
        run: |
          echo "Working directory: $(pwd)"
          ls -al target
          java -jar target/newhellow-0.1.0.jar "blah"